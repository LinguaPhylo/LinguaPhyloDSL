/**
 * generated by Xtext 2.25.0
 */
package lphy.dsl.lPhy.util;

import lphy.dsl.lPhy.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see lphy.dsl.lPhy.LPhyPackage
 * @generated
 */
public class LPhyAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static LPhyPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LPhyAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = LPhyPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LPhySwitch<Adapter> modelSwitch =
    new LPhySwitch<Adapter>()
    {
      @Override
      public Adapter caseLPhyModel(LPhyModel object)
      {
        return createLPhyModelAdapter();
      }
      @Override
      public Adapter caseLawNode(LawNode object)
      {
        return createLawNodeAdapter();
      }
      @Override
      public Adapter caseInstantiatedDistribution(InstantiatedDistribution object)
      {
        return createInstantiatedDistributionAdapter();
      }
      @Override
      public Adapter caseArgument(Argument object)
      {
        return createArgumentAdapter();
      }
      @Override
      public Adapter caseVariable(Variable object)
      {
        return createVariableAdapter();
      }
      @Override
      public Adapter caseRange(Range object)
      {
        return createRangeAdapter();
      }
      @Override
      public Adapter caseDistributionTypeSpecification(DistributionTypeSpecification object)
      {
        return createDistributionTypeSpecificationAdapter();
      }
      @Override
      public Adapter caseLPhyDist(LPhyDist object)
      {
        return createLPhyDistAdapter();
      }
      @Override
      public Adapter caseJavaDist(JavaDist object)
      {
        return createJavaDistAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link lphy.dsl.lPhy.LPhyModel <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lphy.dsl.lPhy.LPhyModel
   * @generated
   */
  public Adapter createLPhyModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lphy.dsl.lPhy.LawNode <em>Law Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lphy.dsl.lPhy.LawNode
   * @generated
   */
  public Adapter createLawNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lphy.dsl.lPhy.InstantiatedDistribution <em>Instantiated Distribution</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lphy.dsl.lPhy.InstantiatedDistribution
   * @generated
   */
  public Adapter createInstantiatedDistributionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lphy.dsl.lPhy.Argument <em>Argument</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lphy.dsl.lPhy.Argument
   * @generated
   */
  public Adapter createArgumentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lphy.dsl.lPhy.Variable <em>Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lphy.dsl.lPhy.Variable
   * @generated
   */
  public Adapter createVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lphy.dsl.lPhy.Range <em>Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lphy.dsl.lPhy.Range
   * @generated
   */
  public Adapter createRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lphy.dsl.lPhy.DistributionTypeSpecification <em>Distribution Type Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lphy.dsl.lPhy.DistributionTypeSpecification
   * @generated
   */
  public Adapter createDistributionTypeSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lphy.dsl.lPhy.LPhyDist <em>Dist</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lphy.dsl.lPhy.LPhyDist
   * @generated
   */
  public Adapter createLPhyDistAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link lphy.dsl.lPhy.JavaDist <em>Java Dist</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see lphy.dsl.lPhy.JavaDist
   * @generated
   */
  public Adapter createJavaDistAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //LPhyAdapterFactory
